// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesApi.Infrastructure.Persistence;

#nullable disable

namespace SalesApi.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240905120439_initial2")]
    partial class initial2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SalesApi.Domain.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("(isnull([FirstName],N'')+N' ')+isnull([LastName],N'')");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers", "sales");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.DiscountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("DiscountAmount")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("FactorDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FactorHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FactorDetailsId");

                    b.HasIndex("FactorHeaderId");

                    b.ToTable("Discounts", "sales");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.FactorDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FactorHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FactorHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("FactorDetails", "sales");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.FactorHeaderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SaleLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalesPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SaleLineId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("FactorHeaders", "sales");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("Products", "sales");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.SaleLineEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("SaleLines", "sales");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.SaleLineProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleLinesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.HasIndex("SaleLinesId");

                    b.ToTable("SaleLinesProducts", "sales");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.SaleLineSalesPersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SaleLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalesPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SaleLineId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("SaleLinesSalesPeople", "sales");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.SalesPersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("(isnull([FirstName],N'')+N' ')+isnull([LastName],N'')");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SalesPeople", "sales");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.DiscountEntity", b =>
                {
                    b.HasOne("SalesApi.Domain.Entities.FactorDetailsEntity", "FactorDetails")
                        .WithMany("FactorDetailsDiscounts")
                        .HasForeignKey("FactorDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FactorDetails_Discounts");

                    b.HasOne("SalesApi.Domain.Entities.FactorHeaderEntity", "FactorHeader")
                        .WithMany("FactorHeaderDiscounts")
                        .HasForeignKey("FactorHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FactorHeader_Discounts");

                    b.Navigation("FactorDetails");

                    b.Navigation("FactorHeader");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.FactorDetailsEntity", b =>
                {
                    b.HasOne("SalesApi.Domain.Entities.FactorHeaderEntity", "FactorHeader")
                        .WithMany("FactorDetails")
                        .HasForeignKey("FactorHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FactorHeader_Details");

                    b.HasOne("SalesApi.Domain.Entities.ProductEntity", "Product")
                        .WithMany("ProductFactorDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Product_FactorDetails");

                    b.Navigation("FactorHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.FactorHeaderEntity", b =>
                {
                    b.HasOne("SalesApi.Domain.Entities.CustomerEntity", "Customer")
                        .WithMany("CustomerFactorHeaders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Customer_FactorHeaders");

                    b.HasOne("SalesApi.Domain.Entities.SaleLineEntity", "SaleLine")
                        .WithMany("SaleLineFactorHeaders")
                        .HasForeignKey("SaleLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("SaleLine_FactorHeaders");

                    b.HasOne("SalesApi.Domain.Entities.SalesPersonEntity", "SalesPerson")
                        .WithMany("SalesPersonFactorHeaders")
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("SalesPerson_FactorHeaders");

                    b.Navigation("Customer");

                    b.Navigation("SaleLine");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.SaleLineProductEntity", b =>
                {
                    b.HasOne("SalesApi.Domain.Entities.ProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesApi.Domain.Entities.SaleLineEntity", null)
                        .WithMany()
                        .HasForeignKey("SaleLinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.SaleLineSalesPersonEntity", b =>
                {
                    b.HasOne("SalesApi.Domain.Entities.SaleLineEntity", "SaleLine")
                        .WithMany()
                        .HasForeignKey("SaleLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesApi.Domain.Entities.SalesPersonEntity", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleLine");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.CustomerEntity", b =>
                {
                    b.Navigation("CustomerFactorHeaders");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.FactorDetailsEntity", b =>
                {
                    b.Navigation("FactorDetailsDiscounts");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.FactorHeaderEntity", b =>
                {
                    b.Navigation("FactorDetails");

                    b.Navigation("FactorHeaderDiscounts");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.ProductEntity", b =>
                {
                    b.Navigation("ProductFactorDetails");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.SaleLineEntity", b =>
                {
                    b.Navigation("SaleLineFactorHeaders");
                });

            modelBuilder.Entity("SalesApi.Domain.Entities.SalesPersonEntity", b =>
                {
                    b.Navigation("SalesPersonFactorHeaders");
                });
#pragma warning restore 612, 618
        }
    }
}
